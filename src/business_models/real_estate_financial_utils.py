from typing import Union, List

def gross_yield(annual_rent_income: int, purchase_price: int) -> float:
    """
    Calculate the Gross Yield for a real estate property.

    :param annual_rent_income: Annual rental income generated by the property.
    :param purchase_price: Purchase price of the property.

    :return: The Gross Yield as a percentage.
    """
    return (annual_rent_income / purchase_price) * 100


def debt_service_coverage_ratio(net_operating_income: int, annual_loan_payment: Union[int, List[int]]) -> Union[float, List[float]]:
    """
    Calculate the Debt Service Coverage Ratio (DSCR) for a property.

    :param net_operating_income: Net operating income generated by the property.
    :param annual_loan_payment: Annual loan payment or a list of annual loan payments.

    :return: The DSCR as a float or a list of DSCR values.
    """
    if isinstance(annual_loan_payment, list):
        return [net_operating_income / payment for payment in annual_loan_payment]
    return net_operating_income / annual_loan_payment


def debt_to_income(total_debt_payments: Union[int, List[int]], annual_income: int) -> Union[float, List[float]]:
    """
    Calculate the Debt-to-Income (DTI) ratio.

    :param total_debt_payments: Total annual debt payments or a list of total debt payments.
    :param annual_income: Gross annual income.

    :return: The DTI ratio as a float or a list of DTI ratios.
    """
    if isinstance(total_debt_payments, list):
        return [payment / annual_income for payment in total_debt_payments]
    return (total_debt_payments / annual_income) * 100


def loan_to_cost(loan_amount: int, total_project_cost: int) -> float:
    """
    Calculate the Loan-to-Cost (LTC) ratio for a real estate project.

    :param loan_amount: The loan amount.
    :param total_project_cost: Total cost of the real estate project.

    :return: The LTC ratio as a percentage.
    """
    return (loan_amount / total_project_cost) * 100


def loan_to_value(loan_amount: int, after_repair_value: int) -> float:
    """
    Calculate the Loan-to-Value (LTV) ratio for a real estate property.

    :param loan_amount: The loan amount.
    :param after_repair_value: The estimated value of the property after repairs.

    :return: The LTV ratio as a percentage.
    """
    return (loan_amount / after_repair_value) * 100


def cash_of_cash(net_annual_cash_flow: int, total_equity_needed_for_purchase: int) -> float:
    """
    Calculate the Cash-on-Cash return for a real estate investment.

    :param net_annual_cash_flow: Net annual cash flow generated by the investment.
    :param total_equity_needed_for_purchase: Total equity needed for the property purchase.

    :return: The Cash-on-Cash return as a percentage.
    """
    return net_annual_cash_flow / total_equity_needed_for_purchase


def return_on_investment(net_profit: int, total_equity_needed_for_purchase: int) -> float:
    """
    Calculate the Return on Investment (ROI) for a real estate investment.

    :param net_profit: Net profit generated by the investment.
    :param total_equity_needed_for_purchase: Total equity needed for the property purchase.

    :return: The ROI as a percentage.
    """
    return net_profit / total_equity_needed_for_purchase


def noi(operating_income: int, operating_expenses: int) -> int:
    """
    Calculate the Net Operating Income (NOI) for a real estate property.

    :param operating_income: Operating income generated by the property.
    :param operating_expenses: Operating expenses associated with the property.

    :return: The Net Operating Income.
    """
    return operating_income - operating_expenses


def cap_rate(net_operating_income: int, purchase_price: int) -> float:
    """
    Calculate the Capitalization Rate (Cap Rate) for a real estate property.

    :param net_operating_income: Net operating income generated by the property.
    :param purchase_price: Purchase price of the property.

    :return: The Cap Rate as a percentage.
    """
    return (net_operating_income / purchase_price) * 100


def multi_family_value_estimation(net_operating_income: int, cap_rate: int) -> int:
    """
    Estimate the value of a multi-family property based on Net Operating Income (NOI) and Cap Rate.

    :param net_operating_income: Net operating income generated by the multi-family property.
    :param cap_rate: Capitalization Rate (Cap Rate) for the property.

    :return: The estimated value of the multi-family property.
    """
    return round(net_operating_income / cap_rate)
